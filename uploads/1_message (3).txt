🔹 Backend — Step by step (DB + APIs)

We’ll keep “current user” as 1 for today (JWT later).

A) Flyway migration V4 — applications, checklist, timeline

Create src/main/resources/db/migration/V4__applications.sql

-- Applications
create table if not exists applications(
  id bigserial primary key,
  student_id bigint not null,
  program_id bigint not null references programs(id),
  status text not null default 'DRAFT', -- DRAFT, SUBMITTED, REVIEW, ACCEPTED, REJECTED
  created_at timestamptz default now()
);

-- Checklist items for each application
create table if not exists checklist_items(
  id bigserial primary key,
  application_id bigint references applications(id) on delete cascade,
  name text not null,
  required boolean default true,
  status text not null default 'PENDING', -- PENDING, DONE
  comment text
);

-- Timeline of events
create table if not exists app_events(
  id bigserial primary key,
  application_id bigint references applications(id) on delete cascade,
  event text not null,
  created_at timestamptz default now()
);


Run the app to apply the migration (watch for “Successfully applied V4”).

B) Application API (create, read, toggle, submit, timeline)

Create src/main/java/com/unisights/applications/ApplicationController.java

package com.unisights.applications;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.*;
import java.util.*;

@RestController
@RequestMapping("/api/v1/apps")
public class ApplicationController {

  private final JdbcTemplate j;
  public ApplicationController(JdbcTemplate j){ this.j = j; }

  private static final Long CURRENT_USER_ID = 1L; // TODO: replace with JWT later

  // 1) Create draft from programId, auto-make checklist from program.reqs->docs
  record CreateReq(Long programId){}
  record ChecklistItem(Long id, String name, String status, boolean required, String comment){}
  record AppView(Long id, String status, Long programId, String programTitle, String university, List<ChecklistItem> checklist){}

  @PostMapping
  public AppView create(@RequestBody CreateReq req){
    // create row
    Long appId = j.queryForObject(
      "insert into applications(student_id, program_id) values (?, ?) returning id",
      Long.class, CURRENT_USER_ID, req.programId());

    // build checklist from program.reqs.docs JSON array (if present)
    String docs = j.query("select reqs->'docs' as docs from programs where id=?",
      rs -> rs.next() ? rs.getString("docs") : "[]", req.programId());
    // very safe parse: strip [ ] and quotes for today
    if (docs != null && docs.length() > 2) {
      for (String item : docs.replace("[","").replace("]","").replace("\"","").split(",")) {
        String name = item.trim();
        if (!name.isEmpty()) {
          j.update("insert into checklist_items(application_id, name, required) values (?,?,true)", appId, name);
        }
      }
    }

    j.update("insert into app_events(application_id, event) values (?,?)", appId, "CREATED");

    return detail(appId);
  }

  // 2) Read application (status + checklist + program summary)
  @GetMapping("/{id}")
  public AppView get(@PathVariable Long id){
    return detail(id);
  }

  private AppView detail(Long id){
    Map<String,Object> head = j.queryForMap("""
      select a.id, a.status, a.program_id, p.title, u.name as university
      from applications a
      join programs p on p.id = a.program_id
      join universities u on u.id = p.university_id
      where a.id=? and a.student_id=?
    """, id, CURRENT_USER_ID);

    List<ChecklistItem> items = j.query("""
      select id, name, status, required, coalesce(comment,'') as comment
      from checklist_items where application_id=? order by id
    """, (rs,i) -> new ChecklistItem(
      rs.getLong("id"), rs.getString("name"), rs.getString("status"),
      rs.getBoolean("required"), rs.getString("comment")), id);

    return new AppView(
      ((Number)head.get("id")).longValue(),
      (String)head.get("status"),
      ((Number)head.get("program_id")).longValue(),
      (String)head.get("title"),
      (String)head.get("university"),
      items
    );
  }

  // 3) Toggle a checklist item PENDING/DONE
  @PostMapping("/{id}/items/{itemId}/status")
  public void setItemStatus(@PathVariable Long id, @PathVariable Long itemId, @RequestParam String status){
    j.update("""
      update checklist_items set status=? where id=? and application_id=?
    """, status, itemId, id);
  }

  // 4) Submit application (status → SUBMITTED + event)
  @PostMapping("/{id}/submit")
  public void submit(@PathVariable Long id){
    j.update("update applications set status='SUBMITTED' where id=? and student_id=?", id, CURRENT_USER_ID);
    j.update("insert into app_events(application_id, event) values (?,?)", id, "SUBMITTED");
  }

  // 5) Timeline
  @GetMapping("/{id}/timeline")
  public List<Map<String,Object>> timeline(@PathVariable Long id){
    return j.queryForList("select event, created_at from app_events where application_id=? order by created_at", id);
  }
}


Postman quick tests:

POST /api/v1/apps body:

{ "programId": 1 }


→ returns application view (id, status, checklist)

POST /api/v1/apps/{id}/items/{itemId}/status?status=DONE → 200

POST /api/v1/apps/{id}/submit → 200

GET /api/v1/apps/{id}/timeline → array with CREATED, SUBMITTED, timestamps